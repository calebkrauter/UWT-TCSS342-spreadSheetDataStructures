Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"bf866e53-f16c-44f7-9cb4-10e8419cdfd9\" name=\"Changes\" comment=\"Code refactoring and GUI updates\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/spreadSheetDataStructures/src/Cell.class\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/spreadSheetDataStructures/src/CellToken.class\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/spreadSheetDataStructures/src/ExpressionTree.class\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/spreadSheetDataStructures/src/ExpressionTreeNode.class\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/spreadSheetDataStructures/src/LiteralToken.class\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/spreadSheetDataStructures/src/OperatorToken.class\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/spreadSheetDataStructures/src/PROJECT.md\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/spreadSheetDataStructures/src/PropertyChangeEnabledSpreadSheet.class\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/spreadSheetDataStructures/src/README.md\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/spreadSheetDataStructures/src/Spreadsheet.class\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/spreadSheetDataStructures/src/Token.class\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/spreadSheetDataStructures/src/TopologicalSort.class\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/spreadSheetDataStructures/src/hw6b-23wi.pdf\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/spreadSheetDataStructures/src/view/CellsPanel$1.class\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/spreadSheetDataStructures/src/view/CellsPanel.class\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/spreadSheetDataStructures/src/view/DisplayGui.class\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/spreadSheetDataStructures/src/view/LabelColumns.class\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/spreadSheetDataStructures/src/view/LabelRows.class\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/spreadSheetDataStructures/src/view/Main.class\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/spreadSheetDataStructures/src/view/SpreadSheetPanel.class\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/spreadSheetDataStructures-2.iml\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/Cell.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/model/Cell.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/CellToken.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/model/CellToken.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/ExpressionTree.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/model/ExpressionTree.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/ExpressionTreeNode.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/model/ExpressionTreeNode.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/LiteralToken.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/model/LiteralToken.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/OperatorToken.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/model/OperatorToken.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/PROJECT.md\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/PROJECT.md\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/PropertyChangeEnabledSpreadSheet.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/model/PropertyChangeEnabledSpreadSheet.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/README.md\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/README.md\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/Spreadsheet.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/model/Spreadsheet.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/Token.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/model/Token.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/TopologicalSort.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/model/TopologicalSort.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/hw6b-23wi.pdf\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/hw6b-23wi.pdf\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/view/CellsPanel.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/view/CellsPanel.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/view/DisplayGui.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/view/DisplayGui.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/view/LabelColumns.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/view/LabelColumns.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/view/LabelRows.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/view/LabelRows.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/view/Main.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/view/Main.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/view/SpreadSheetPanel.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/view/SpreadSheetPanel.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Interface\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2MkI5Csc03J8REoAgn4UWmlihlS\" />\r\n  <component name=\"ProjectLevelVcsManager\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"ASKED_ADD_EXTERNAL_FILES\": \"true\",\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"WebServerToolWindowFactoryState\": \"false\",\r\n    \"last_opened_file_path\": \"D:/Coding/Main/TCSS 305/acomfort-assignment5/src/model/PropertyChangeEnabledCraps.java\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.detected.package.tslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"run.code.analysis.last.selected.profile\": \"pProject Default\",\r\n    \"settings.editor.selected.configurable\": \"configurable.group.tools\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\Coding\\Main\\spreadSheetDataStructures\" />\r\n    </key>\r\n    <key name=\"MoveClassesOrPackagesDialog.RECENTS_KEY\">\r\n      <recent name=\"\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"RunSpreadsheet\" type=\"Application\" factoryName=\"Application\">\r\n      <option name=\"ALTERNATIVE_JRE_PATH\" value=\"19\" />\r\n      <option name=\"ALTERNATIVE_JRE_PATH_ENABLED\" value=\"true\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"view.Main\" />\r\n      <module name=\"spreadSheetDataStructures\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"bf866e53-f16c-44f7-9cb4-10e8419cdfd9\" name=\"Changes\" comment=\"\" />\r\n      <created>1678304977631</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1678304977631</updated>\r\n      <workItem from=\"1678304979004\" duration=\"8343000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Code refactoring and GUI updates\">\r\n      <created>1678311766229</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1678311766229</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"2\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <MESSAGE value=\"Code refactoring and GUI updates\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Code refactoring and GUI updates\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	
+++ b/.idea/workspace.xml	
@@ -4,48 +4,30 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="bf866e53-f16c-44f7-9cb4-10e8419cdfd9" name="Changes" comment="Code refactoring and GUI updates">
+    <list default="true" id="bf866e53-f16c-44f7-9cb4-10e8419cdfd9" name="Changes" comment="Package Changes/Javadoc">
+      <change afterPath="$PROJECT_DIR$/.idea/intellij-javadocs-4.0.1.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/spreadSheetDataStructures/src/Cell.class" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/spreadSheetDataStructures/src/CellToken.class" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/spreadSheetDataStructures/src/ExpressionTree.class" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/spreadSheetDataStructures/src/ExpressionTreeNode.class" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/spreadSheetDataStructures/src/LiteralToken.class" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/spreadSheetDataStructures/src/OperatorToken.class" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/spreadSheetDataStructures/src/PROJECT.md" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/spreadSheetDataStructures/src/PropertyChangeEnabledSpreadSheet.class" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/spreadSheetDataStructures/src/README.md" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/spreadSheetDataStructures/src/Spreadsheet.class" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/spreadSheetDataStructures/src/Token.class" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/spreadSheetDataStructures/src/TopologicalSort.class" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/spreadSheetDataStructures/src/hw6b-23wi.pdf" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/spreadSheetDataStructures/src/view/CellsPanel$1.class" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/spreadSheetDataStructures/src/view/CellsPanel.class" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/spreadSheetDataStructures/src/view/DisplayGui.class" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/spreadSheetDataStructures/src/view/LabelColumns.class" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/spreadSheetDataStructures/src/view/LabelRows.class" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/spreadSheetDataStructures/src/view/Main.class" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/spreadSheetDataStructures/src/view/SpreadSheetPanel.class" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/spreadSheetDataStructures-2.iml" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/Cell.java" beforeDir="false" afterPath="$PROJECT_DIR$/model/Cell.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/CellToken.java" beforeDir="false" afterPath="$PROJECT_DIR$/model/CellToken.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/ExpressionTree.java" beforeDir="false" afterPath="$PROJECT_DIR$/model/ExpressionTree.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/ExpressionTreeNode.java" beforeDir="false" afterPath="$PROJECT_DIR$/model/ExpressionTreeNode.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/LiteralToken.java" beforeDir="false" afterPath="$PROJECT_DIR$/model/LiteralToken.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/OperatorToken.java" beforeDir="false" afterPath="$PROJECT_DIR$/model/OperatorToken.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/PROJECT.md" beforeDir="false" afterPath="$PROJECT_DIR$/PROJECT.md" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/PropertyChangeEnabledSpreadSheet.java" beforeDir="false" afterPath="$PROJECT_DIR$/model/PropertyChangeEnabledSpreadSheet.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/README.md" beforeDir="false" afterPath="$PROJECT_DIR$/README.md" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/Spreadsheet.java" beforeDir="false" afterPath="$PROJECT_DIR$/model/Spreadsheet.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/Token.java" beforeDir="false" afterPath="$PROJECT_DIR$/model/Token.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/TopologicalSort.java" beforeDir="false" afterPath="$PROJECT_DIR$/model/TopologicalSort.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/hw6b-23wi.pdf" beforeDir="false" afterPath="$PROJECT_DIR$/hw6b-23wi.pdf" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/view/CellsPanel.java" beforeDir="false" afterPath="$PROJECT_DIR$/view/CellsPanel.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/view/DisplayGui.java" beforeDir="false" afterPath="$PROJECT_DIR$/view/DisplayGui.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/view/LabelColumns.java" beforeDir="false" afterPath="$PROJECT_DIR$/view/LabelColumns.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/view/LabelRows.java" beforeDir="false" afterPath="$PROJECT_DIR$/view/LabelRows.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/view/Main.java" beforeDir="false" afterPath="$PROJECT_DIR$/view/Main.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/view/SpreadSheetPanel.java" beforeDir="false" afterPath="$PROJECT_DIR$/view/SpreadSheetPanel.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/model/Cell.java" beforeDir="false" afterPath="$PROJECT_DIR$/model/Cell.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/model/CellToken.java" beforeDir="false" afterPath="$PROJECT_DIR$/model/CellToken.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/model/ExpressionTree.java" beforeDir="false" afterPath="$PROJECT_DIR$/model/ExpressionTree.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/model/ExpressionTreeNode.java" beforeDir="false" afterPath="$PROJECT_DIR$/model/ExpressionTreeNode.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/model/LiteralToken.java" beforeDir="false" afterPath="$PROJECT_DIR$/model/LiteralToken.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/model/OperatorToken.java" beforeDir="false" afterPath="$PROJECT_DIR$/model/OperatorToken.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/model/PropertyChangeEnabledSpreadSheet.java" beforeDir="false" afterPath="$PROJECT_DIR$/model/PropertyChangeEnabledSpreadSheet.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/model/Spreadsheet.java" beforeDir="false" afterPath="$PROJECT_DIR$/model/Spreadsheet.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/model/Token.java" beforeDir="false" afterPath="$PROJECT_DIR$/model/Token.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/model/TopologicalSort.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/spreadSheetDataStructures/model/Cell.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/spreadSheetDataStructures/model/Cell.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/spreadSheetDataStructures/model/CellToken.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/spreadSheetDataStructures/model/CellToken.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/spreadSheetDataStructures/model/ExpressionTree.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/spreadSheetDataStructures/model/ExpressionTree.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/spreadSheetDataStructures/model/ExpressionTreeNode.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/spreadSheetDataStructures/model/ExpressionTreeNode.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/spreadSheetDataStructures/model/LiteralToken.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/spreadSheetDataStructures/model/LiteralToken.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/spreadSheetDataStructures/model/OperatorToken.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/spreadSheetDataStructures/model/OperatorToken.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/spreadSheetDataStructures/model/Spreadsheet.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/spreadSheetDataStructures/model/Spreadsheet.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/spreadSheetDataStructures/model/Token.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/spreadSheetDataStructures/model/Token.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/spreadSheetDataStructures/model/TopologicalSort.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/spreadSheetDataStructures/model/TopologicalSort.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/spreadSheetDataStructures/view/CellsPanel$1.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/spreadSheetDataStructures/view/CellsPanel$1.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/spreadSheetDataStructures/view/CellsPanel.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/spreadSheetDataStructures/view/CellsPanel.class" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -85,14 +67,15 @@
     "ASKED_ADD_EXTERNAL_FILES": "true",
     "RunOnceActivity.OpenProjectViewOnStart": "true",
     "RunOnceActivity.ShowReadmeOnStart": "true",
+    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
     "WebServerToolWindowFactoryState": "false",
-    "last_opened_file_path": "D:/Coding/Main/TCSS 305/acomfort-assignment5/src/model/PropertyChangeEnabledCraps.java",
+    "last_opened_file_path": "D:/Coding/Main/TCSS 305/acomfort-assignment3",
     "node.js.detected.package.eslint": "true",
     "node.js.detected.package.tslint": "true",
     "node.js.selected.package.eslint": "(autodetect)",
     "node.js.selected.package.tslint": "(autodetect)",
     "run.code.analysis.last.selected.profile": "pProject Default",
-    "settings.editor.selected.configurable": "configurable.group.tools",
+    "settings.editor.selected.configurable": "preferences.pluginManager",
     "vue.rearranger.settings.migration": "true"
   }
 }]]></component>
@@ -123,7 +106,8 @@
       <option name="number" value="Default" />
       <option name="presentableId" value="Default" />
       <updated>1678304977631</updated>
-      <workItem from="1678304979004" duration="8343000" />
+      <workItem from="1678304979004" duration="8954000" />
+      <workItem from="1678314284666" duration="3593000" />
     </task>
     <task id="LOCAL-00001" summary="Code refactoring and GUI updates">
       <created>1678311766229</created>
@@ -132,7 +116,14 @@
       <option name="project" value="LOCAL" />
       <updated>1678311766229</updated>
     </task>
-    <option name="localTasksCounter" value="2" />
+    <task id="LOCAL-00002" summary="Package Changes/Javadoc">
+      <created>1678313701758</created>
+      <option name="number" value="00002" />
+      <option name="presentableId" value="LOCAL-00002" />
+      <option name="project" value="LOCAL" />
+      <updated>1678313701758</updated>
+    </task>
+    <option name="localTasksCounter" value="3" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -141,6 +132,7 @@
   <component name="VcsManagerConfiguration">
     <option name="ADD_EXTERNAL_FILES_SILENTLY" value="true" />
     <MESSAGE value="Code refactoring and GUI updates" />
-    <option name="LAST_COMMIT_MESSAGE" value="Code refactoring and GUI updates" />
+    <MESSAGE value="Package Changes/Javadoc" />
+    <option name="LAST_COMMIT_MESSAGE" value="Package Changes/Javadoc" />
   </component>
 </project>
\ No newline at end of file
Index: model/OperatorToken.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model;\r\n\r\npublic class OperatorToken extends Token {\r\n    public static final char Plus  = '+';\r\n    public static final char Minus = '-';\r\n    public static final char Mult  = '*';\r\n    public static final char Div   = '/';\r\n    public static final char LeftParen  = '(';\r\n    \r\n    private final char operatorToken;\r\n    \r\n    public OperatorToken(char operatorToken) {\r\n        super(\"OPERATOR\");\r\n        this.operatorToken = operatorToken;\r\n    }\r\n    \r\n    /*\r\n     * Return the priority of this OperatorToken.\r\n     *\r\n     * priorities:\r\n     *   +, - : 0\r\n     *   *, / : 1\r\n     *   (    : 2\r\n     *\r\n     * @return  the priority of operatorToken\r\n     */\r\n    public int priority() {\r\n        switch (this.operatorToken) {\r\n            case Plus, Minus -> {\r\n                return 0;\r\n            }\r\n            case Mult, Div -> {\r\n                return 1;\r\n            }\r\n            case LeftParen -> {\r\n                return 2;\r\n            }\r\n            default -> {\r\n                // This case should NEVER happen\r\n                System.out.println(\"Error in priority.\");\r\n                System.exit(0);\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n    \r\n    public char getOperatorToken() {\r\n        return this.operatorToken;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/model/OperatorToken.java b/model/OperatorToken.java
--- a/model/OperatorToken.java	
+++ b/model/OperatorToken.java	
@@ -1,28 +1,62 @@
+/**
+ * @author Andy Comfort
+ */
 package model;
 
+/**
+ * Represents a token containing a mathematical operator.
+ */
 public class OperatorToken extends Token {
+    
+    /**
+     * The operator plus (+).
+     */
     public static final char Plus  = '+';
+    
+    /**
+     * The operator minus (-).
+     */
     public static final char Minus = '-';
+    
+    /**
+     * The operator multiplication (*).
+     */
     public static final char Mult  = '*';
+    
+    /**
+     * The operator division (/).
+     */
     public static final char Div   = '/';
+    
+    /**
+     * The operator left parentheses (().
+     */
     public static final char LeftParen  = '(';
     
+    /**
+     * The operator this token represents.
+     */
     private final char operatorToken;
     
+    /**
+     * Instantiates a new Operator token.
+     *
+     * @param operatorToken the operator
+     */
     public OperatorToken(char operatorToken) {
         super("OPERATOR");
         this.operatorToken = operatorToken;
     }
     
-    /*
+    /**
      * Return the priority of this OperatorToken.
-     *
+     * <p>
      * priorities:
-     *   +, - : 0
-     *   *, / : 1
-     *   (    : 2
+     * +, - : 0
+     * *, / : 1
+     * (    : 2
      *
-     * @return  the priority of operatorToken
+     * @return the priority of operatorToken
      */
     public int priority() {
         switch (this.operatorToken) {
@@ -44,6 +78,11 @@
         return -1;
     }
     
+    /**
+     * Gets operator token.
+     *
+     * @return the operator token
+     */
     public char getOperatorToken() {
         return this.operatorToken;
     }
Index: model/LiteralToken.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model;\r\n\r\npublic class LiteralToken extends Token {\r\n    private final int value;\r\n    \r\n    public LiteralToken(int theValue) {\r\n        super(\"LITERAL\");\r\n        value = theValue;\r\n    }\r\n    \r\n    public int getValue() {\r\n        return value;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/model/LiteralToken.java b/model/LiteralToken.java
--- a/model/LiteralToken.java	
+++ b/model/LiteralToken.java	
@@ -1,13 +1,31 @@
+/**
+ * @author Andy Comfort
+ */
 package model;
 
+/**
+ * Represents a token containing a numeric value.
+ */
 public class LiteralToken extends Token {
+    
+    /** The value of this token. */
     private final int value;
     
+    /**
+     * Instantiates a new Literal token.
+     *
+     * @param theValue the value
+     */
     public LiteralToken(int theValue) {
         super("LITERAL");
         value = theValue;
     }
     
+    /**
+     * Gets value.
+     *
+     * @return the value
+     */
     public int getValue() {
         return value;
     }
Index: .idea/intellij-javadocs-4.0.1.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/intellij-javadocs-4.0.1.xml b/.idea/intellij-javadocs-4.0.1.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/intellij-javadocs-4.0.1.xml	
@@ -0,0 +1,204 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="JavaDocConfiguration">
+    <GENERAL>
+      <MODE>UPDATE</MODE>
+      <OVERRIDDEN_METHODS>false</OVERRIDDEN_METHODS>
+      <SPLITTED_CLASS_NAME>true</SPLITTED_CLASS_NAME>
+      <LEVELS>
+        <LEVEL>FIELD</LEVEL>
+        <LEVEL>METHOD</LEVEL>
+        <LEVEL>TYPE</LEVEL>
+      </LEVELS>
+      <VISIBILITIES>
+        <VISIBILITY>DEFAULT</VISIBILITY>
+        <VISIBILITY>PROTECTED</VISIBILITY>
+        <VISIBILITY>PUBLIC</VISIBILITY>
+      </VISIBILITIES>
+    </GENERAL>
+    <TEMPLATES>
+      <CLASSES>
+        <CLASS>
+          <KEY>^.*(public|protected|private)*.+interface\s+\w+.*</KEY>
+          <VALUE>/**\n
+ * The interface ${name}.\n
+&lt;#if element.typeParameters?has_content&gt;        * \n
+&lt;/#if&gt;
+&lt;#list element.typeParameters as typeParameter&gt;
+        * @param &lt;${typeParameter.name}&gt; the type parameter\n
+&lt;/#list&gt;
+ */</VALUE>
+        </CLASS>
+        <CLASS>
+          <KEY>^.*(public|protected|private)*.+enum\s+\w+.*</KEY>
+          <VALUE>/**\n
+ * The enum ${name}.\n
+ */</VALUE>
+        </CLASS>
+        <CLASS>
+          <KEY>^.*(public|protected|private)*.+class\s+\w+.*</KEY>
+          <VALUE>/**\n
+ * The type ${name}.\n
+&lt;#if element.typeParameters?has_content&gt;        * \n
+&lt;/#if&gt;
+&lt;#list element.typeParameters as typeParameter&gt;
+        * @param &lt;${typeParameter.name}&gt; the type parameter\n
+&lt;/#list&gt;
+ */</VALUE>
+        </CLASS>
+        <CLASS>
+          <KEY>.+</KEY>
+          <VALUE>/**\n
+ * The type ${name}.\n
+ */</VALUE>
+        </CLASS>
+      </CLASSES>
+      <CONSTRUCTORS>
+        <CONSTRUCTOR>
+          <KEY>.+</KEY>
+          <VALUE>/**\n
+ * Instantiates a new ${name}.\n
+&lt;#if element.parameterList.parameters?has_content&gt;
+         *\n
+&lt;/#if&gt;
+&lt;#list element.parameterList.parameters as parameter&gt;
+         * @param ${parameter.name} the ${paramNames[parameter.name]}\n
+&lt;/#list&gt;
+&lt;#if element.throwsList.referenceElements?has_content&gt;
+         *\n
+&lt;/#if&gt;
+&lt;#list element.throwsList.referenceElements as exception&gt;
+         * @throws ${exception.referenceName} the ${exceptionNames[exception.referenceName]}\n
+&lt;/#list&gt;
+ */</VALUE>
+        </CONSTRUCTOR>
+      </CONSTRUCTORS>
+      <METHODS>
+        <METHOD>
+          <KEY>^.*(public|protected|private)*\s*.*(\w(\s*&lt;.+&gt;)*)+\s+get\w+\s*\(.*\).+</KEY>
+          <VALUE>/**\n
+ * Gets ${partName}.\n
+&lt;#if element.typeParameters?has_content&gt;         * \n
+&lt;/#if&gt;
+&lt;#list element.typeParameters as typeParameter&gt;
+         * @param &lt;${typeParameter.name}&gt; the type parameter\n
+&lt;/#list&gt;
+&lt;#if element.parameterList.parameters?has_content&gt;
+         *\n
+&lt;/#if&gt;
+&lt;#list element.parameterList.parameters as parameter&gt;
+         * @param ${parameter.name} the ${paramNames[parameter.name]}\n
+&lt;/#list&gt;
+&lt;#if isNotVoid&gt;
+         *\n
+         * @return the ${partName}\n
+&lt;/#if&gt;
+&lt;#if element.throwsList.referenceElements?has_content&gt;
+         *\n
+&lt;/#if&gt;
+&lt;#list element.throwsList.referenceElements as exception&gt;
+         * @throws ${exception.referenceName} the ${exceptionNames[exception.referenceName]}\n
+&lt;/#list&gt;
+ */</VALUE>
+        </METHOD>
+        <METHOD>
+          <KEY>^.*(public|protected|private)*\s*.*(void|\w(\s*&lt;.+&gt;)*)+\s+set\w+\s*\(.*\).+</KEY>
+          <VALUE>/**\n
+ * Sets ${partName}.\n
+&lt;#if element.typeParameters?has_content&gt;         * \n
+&lt;/#if&gt;
+&lt;#list element.typeParameters as typeParameter&gt;
+         * @param &lt;${typeParameter.name}&gt; the type parameter\n
+&lt;/#list&gt;
+&lt;#if element.parameterList.parameters?has_content&gt;
+         *\n
+&lt;/#if&gt;
+&lt;#list element.parameterList.parameters as parameter&gt;
+         * @param ${parameter.name} the ${paramNames[parameter.name]}\n
+&lt;/#list&gt;
+&lt;#if isNotVoid&gt;
+         *\n
+         * @return the ${partName}\n
+&lt;/#if&gt;
+&lt;#if element.throwsList.referenceElements?has_content&gt;
+         *\n
+&lt;/#if&gt;
+&lt;#list element.throwsList.referenceElements as exception&gt;
+         * @throws ${exception.referenceName} the ${exceptionNames[exception.referenceName]}\n
+&lt;/#list&gt;
+ */</VALUE>
+        </METHOD>
+        <METHOD>
+          <KEY>^.*((public\s+static)|(static\s+public))\s+void\s+main\s*\(\s*String\s*(\[\s*\]|\.\.\.)\s+\w+\s*\).+</KEY>
+          <VALUE>/**\n
+ * The entry point of application.\n
+
+     &lt;#if element.parameterList.parameters?has_content&gt;
+         *\n
+&lt;/#if&gt;
+     * @param ${element.parameterList.parameters[0].name} the input arguments\n
+&lt;#if element.throwsList.referenceElements?has_content&gt;
+         *\n
+&lt;/#if&gt;
+&lt;#list element.throwsList.referenceElements as exception&gt;
+         * @throws ${exception.referenceName} the ${exceptionNames[exception.referenceName]}\n
+&lt;/#list&gt;
+ */</VALUE>
+        </METHOD>
+        <METHOD>
+          <KEY>.+</KEY>
+          <VALUE>/**\n
+ * ${name}&lt;#if isNotVoid&gt; ${return}&lt;/#if&gt;.\n
+&lt;#if element.typeParameters?has_content&gt;         * \n
+&lt;/#if&gt;
+&lt;#list element.typeParameters as typeParameter&gt;
+         * @param &lt;${typeParameter.name}&gt; the type parameter\n
+&lt;/#list&gt;
+&lt;#if element.parameterList.parameters?has_content&gt;
+         *\n
+&lt;/#if&gt;
+&lt;#list element.parameterList.parameters as parameter&gt;
+         * @param ${parameter.name} the ${paramNames[parameter.name]}\n
+&lt;/#list&gt;
+&lt;#if isNotVoid&gt;
+         *\n
+         * @return the ${return}\n
+&lt;/#if&gt;
+&lt;#if element.throwsList.referenceElements?has_content&gt;
+         *\n
+&lt;/#if&gt;
+&lt;#list element.throwsList.referenceElements as exception&gt;
+         * @throws ${exception.referenceName} the ${exceptionNames[exception.referenceName]}\n
+&lt;/#list&gt;
+ */</VALUE>
+        </METHOD>
+      </METHODS>
+      <FIELDS>
+        <FIELD>
+          <KEY>^.*(public|protected|private)*.+static.*(\w\s\w)+.+</KEY>
+          <VALUE>/**\n
+ * The constant ${element.getName()}.\n
+ */</VALUE>
+        </FIELD>
+        <FIELD>
+          <KEY>^.*(public|protected|private)*.*(\w\s\w)+.+</KEY>
+          <VALUE>/**\n
+    &lt;#if element.parent.isInterface()&gt;
+        * The constant ${element.getName()}.\n
+&lt;#else&gt;
+        * The ${name}.\n
+&lt;/#if&gt; */</VALUE>
+        </FIELD>
+        <FIELD>
+          <KEY>.+</KEY>
+          <VALUE>/**\n
+    &lt;#if element.parent.isEnum()&gt;
+        *${name} ${typeName}.\n
+&lt;#else&gt;
+        * The ${name}.\n
+&lt;/#if&gt;*/</VALUE>
+        </FIELD>
+      </FIELDS>
+    </TEMPLATES>
+  </component>
+</project>
\ No newline at end of file
Index: model/ExpressionTreeNode.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model;\r\n\r\npublic class ExpressionTreeNode {\r\n    private final Token token;\r\n    \r\n    final ExpressionTreeNode left;\r\n    final ExpressionTreeNode right;\r\n    \r\n    public ExpressionTreeNode(Token theToken, ExpressionTreeNode leftSubtree, ExpressionTreeNode rightSubtree) {\r\n        token = theToken;\r\n        left = leftSubtree;\r\n        right = rightSubtree;\r\n    }\r\n    \r\n    public Token getToken() {\r\n        return token;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/model/ExpressionTreeNode.java b/model/ExpressionTreeNode.java
--- a/model/ExpressionTreeNode.java	
+++ b/model/ExpressionTreeNode.java	
@@ -1,3 +1,6 @@
+/**
+ * @author Bairu Li
+ */
 package model;
 
 public class ExpressionTreeNode {
Index: model/ExpressionTree.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model;\r\n\r\nimport java.util.HashSet;\r\nimport java.util.Set;\r\nimport java.util.Stack;\r\n\r\npublic class ExpressionTree {\r\n    private ExpressionTreeNode root;\r\n    private final Set<CellToken> dependentCells;\r\n    \r\n    // Constructor with no root\r\n    public ExpressionTree() {\r\n        root = null;\r\n        dependentCells = new HashSet<>();\r\n    }\r\n    \r\n    public int evaluate(Spreadsheet spreadsheet) {\r\n    \treturn evalTree(spreadsheet, root);\r\n    }\r\n    \r\n    private int evalTree(Spreadsheet spreadsheet, ExpressionTreeNode n) {\r\n    \tif (n == null) {\r\n    \t\treturn 0;\r\n    \t}\r\n    \t\r\n    \t// returns value of the leafs to be operated on\r\n    \tif (n.left == null && n.right == null) {\r\n    \t\tif (n.getToken().getType().equals(\"CELL\")) {\r\n    \t\t\treturn spreadsheet.getCellValue((CellToken) n.getToken());\r\n            } else if (n.getToken().getType().equals(\"LITERAL\")) {\r\n            \treturn ((LiteralToken) n.getToken()).getValue();\r\n            }\r\n    \t}\r\n    \t\r\n    \t// post order traversal\r\n    \tint leftEval = evalTree(spreadsheet, n.left);\r\n    \tint rightEval = evalTree(spreadsheet, n.right);\r\n    \t\r\n    \t// operates accordingly\r\n    \tchar op = ((OperatorToken) n.getToken()).getOperatorToken();\r\n    \tif (op == '+')\r\n    \t\treturn leftEval + rightEval;\r\n    \tif (op == '-')\r\n    \t\treturn leftEval - rightEval;\r\n    \tif (op == '*')\r\n    \t\treturn leftEval * rightEval;\r\n    \treturn leftEval / rightEval;\r\n    }\r\n    \r\n    public void BuildExpressionTree (Stack<Token> s) {\r\n        dependentCells.clear();\r\n        root = GetExpressionTree(s);\r\n    }\r\n    \r\n    private ExpressionTreeNode GetExpressionTree(Stack<Token> s) {\r\n        ExpressionTreeNode returnTree;\r\n        Token token;\r\n        \r\n        if (s.isEmpty()) {\r\n            return null;\r\n        }\r\n        \r\n        token = (Token) s.pop();  // need to handle stack underflow\r\n        if ((token.getType().equals(\"LITERAL\")) ||\r\n                (token.getType().equals(\"CELL\"))) {\r\n            // Literals and Cells are leaves in the expression tree\r\n        \treturnTree = new ExpressionTreeNode(token, null, null);\r\n        \t// adds dependent cells\r\n        \tif (token.getType().equals(\"CELL\")) {\r\n        \t\tdependentCells.add((CellToken) token);\r\n        \t}\r\n            return returnTree;\r\n        } else if (token.getType().equals(\"OPERATOR\")) {\r\n            // Continue finding tokens that will form the\r\n            // right subtree and left subtree.\r\n            ExpressionTreeNode rightSubtree = GetExpressionTree (s);\r\n            ExpressionTreeNode leftSubtree  = GetExpressionTree (s);\r\n            returnTree =\r\n                    new ExpressionTreeNode(token, leftSubtree, rightSubtree);\r\n            return returnTree;\r\n        }\r\n        // never reaching\r\n        return null;\r\n    }\r\n    \r\n    public Set<CellToken> getDependents() {\r\n    \treturn dependentCells;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/model/ExpressionTree.java b/model/ExpressionTree.java
--- a/model/ExpressionTree.java	
+++ b/model/ExpressionTree.java	
@@ -1,3 +1,6 @@
+/**
+ * @author Bairu Li
+ */
 package model;
 
 import java.util.HashSet;
@@ -60,7 +63,7 @@
             return null;
         }
         
-        token = (Token) s.pop();  // need to handle stack underflow
+        token = s.pop();  // need to handle stack underflow
         if ((token.getType().equals("LITERAL")) ||
                 (token.getType().equals("CELL"))) {
             // Literals and Cells are leaves in the expression tree
Index: model/PropertyChangeEnabledSpreadSheet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model;\r\n\r\nimport java.beans.PropertyChangeListener;\r\n\r\n/**\r\n * Defines behaviors that allow propertyChangeListeners to be\r\n * added to the spreadsheet, so it can be listened to.\r\n */\r\npublic interface PropertyChangeEnabledSpreadSheet {\r\n    \r\n    \r\n    /** The property cycle. */\r\n    String PROPERTY_CYCLE = \"cycle\";\r\n    \r\n    /**\r\n     * Adds a property change listener.\r\n     *\r\n     * @param theListener the listener\r\n     */\r\n    void addPropertyChangeListener(PropertyChangeListener theListener);\r\n    \r\n    /**\r\n     * Adds a property change listener.\r\n     *\r\n     * @param thePropertyName the property name\r\n     * @param theListener the listener\r\n     */\r\n    void addPropertyChangeListener(String thePropertyName, PropertyChangeListener theListener);\r\n    \r\n    /**\r\n     * Removes a property change listener.\r\n     *\r\n     * @param theListener the listener\r\n     */\r\n    void removePropertyChangeListener(PropertyChangeListener theListener);\r\n    \r\n    /**\r\n     * Removes a property change listener.\r\n     *\r\n     * @param thePropertyName  the property name\r\n     * @param theListener the listener\r\n     */\r\n    void removePropertyChangeListener(String thePropertyName,\r\n                                      PropertyChangeListener theListener);\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/model/PropertyChangeEnabledSpreadSheet.java b/model/PropertyChangeEnabledSpreadSheet.java
--- a/model/PropertyChangeEnabledSpreadSheet.java	
+++ b/model/PropertyChangeEnabledSpreadSheet.java	
@@ -1,3 +1,6 @@
+/**
+ * @author Andy Comfort
+ */
 package model;
 
 import java.beans.PropertyChangeListener;
